#!/usr/bin/perl

use warnings;
use strict;

require 5.10.0;

use CGI;
use DBI;
use FindBin qw($Bin);
use JSON qw(encode_json decode_json);

use constant ADMIN => 2;
use constant NORMAL => 1;
use constant READONLY => 0;

my $query = CGI->new;
my $postdata = decode_json($query->param('POSTDATA'));
#print "Content-Type: text/json;charset=utf-8\n";
#print "\n";
#print encode_json([[ 'error', 'response is '.$postdata->{command}]]);
#return;

my @returns;
my $dbh;

my $trace = 0;
#my $trace = 1;

if ($trace) {
    foreach my $param ($query->param()) {
	warn "$param = ",$query->param($param),"\n";
    }
}

eval {
    my $command = $postdata->{command};

    my $objectType = "";
    if ($command eq 'get' || $command eq 'setHidden') { $objectType = $postdata->{type}; }

    #######################################
    # Make sure the user is approved to use the database
    my $database = $postdata->{database};
    my $username = $postdata->{username};
    my $password = $postdata->{password};
    my $queryApiVersion = $postdata->{apiVersion};

    #######################################
    # Get the api version number from the javascript file
    my $apiVersion;
    open V, "$Bin/../html/js/utils.js" or do {
	push @returns, [ 'error', 'Internal error: Missing apiVersion file' ];
	return;
    };

    /\bapiVersion\s*=\s*(.*)\s*;/ && ($apiVersion = $1) while <V>;
    close V;

    if ($queryApiVersion != $apiVersion || !$apiVersion) {
	push @returns, [ 'error', 'The server has been updated - you need to log out and reload the login page before you can continue.  If you see this message more than once make sure you are reloading the page, e.g. in Firefox you must press the shift key while clicking on the reload button' ];
	return;
    }

    #######################################
    # Read the config file to find the database
    # Config file is a list of pairs of lines, with database name and directory
    open CONFIG, "$Bin/config" or die "Cannot open config file, $!\n";
    my %config = map { chomp; $_ } <CONFIG>;
    close CONFIG;

    exists $config{$database} or die "No such database: $database\n";

    # Got the database, now find the directory that the database and lock file are stored in
    my $dir = $config{$database};

    if (-f "$dir/LOCKED") {
	my $message;
	if (open F, "$dir/LOCKED") {
	    $message = <F>;
	    close F;
	} else {
	    $message = 'Database is locked';
	}

	push @returns, [ 'error', "Database \"$database\" cannot be used: $message" ];
	return;
    }

    $dbh = DBI->connect("dbi:SQLite:dbname=$config{$database}/db","","",{
	AutoCommit=>0,
	PrintError=>0,
	RaiseError=>1,
		       });

    my ($actualPassword,$type,$hidden) = $dbh->selectrow_array("SELECT userPassword,userType,userHidden FROM user WHERE userName = ?",undef,$username);
    
    if ($hidden) {
	push @returns, [ 'error', "User $username is currently not allowed to use the system" ];
	return;
    }

    if (!$actualPassword || $password ne $actualPassword) {
	push @returns, [ 'error', "Username or password is wrong" ];
	return;
    }

    if ($password eq 'changeme' &&  $command ne 'changeMyPassword' && $command ne 'login') {
	push @returns, [ 'error', 'You must change your password before you can do anything else' ];
	return;
    }

    #######################################
    if ($command eq 'login') {
	push @returns, [ 'login',$type ];

    #######################################
    # Hidden stuff

    } elsif ($command eq 'setHidden') {
	if ($type <= READONLY) { push @returns, ['error','No permission']; return }

	my $id = $postdata->{id};
	my $hidden = $postdata->{hidden};

	# make sure that the type is one we know about
	if (! $objectType ~~ [qw(location user bin tag)]) {
	    push @returns, [ 'error', "Unknown object type $objectType" ];
	    return;
	}
	    
	$dbh->do("UPDATE $objectType SET ${objectType}Hidden = ? WHERE ${objectType}Id = ?",undef,$hidden,$id);
	$dbh->commit;
	push @returns, details($dbh,$objectType,$id);

    #######################################
    # Location

    } elsif ($command eq 'addLocation') {
	if ($type <= READONLY) { push @returns, ['error','No permission']; return }
	my $locationName = $postdata->{locationName};
	my ($count) = $dbh->selectrow_array("SELECT COUNT(*) FROM location WHERE locationName = ?",undef,$locationName);
	if ($count > 0) {
	    push @returns, [ 'error', "Location $locationName already exists\n" ];
	} else {
	    $dbh->do("INSERT INTO location (locationName) VALUES (?)",undef,$locationName);
	    my $locationId = $dbh->last_insert_id(undef,undef,undef,undef);
	    $dbh->commit;
	    push @returns, details($dbh,'location',$locationId);
	}

    } elsif ($command eq 'setLocationName') {
	if ($type <= READONLY) { push @returns, ['error','No permission']; return }

	my $locationId = $postdata->{locationId};
	my $newName = $postdata->{locationName};

	my ($count) = $dbh->selectrow_array("SELECT COUNT(*) FROM location WHERE locationName = ?",undef,$newName);
	if ($count > 0) {
	    push @returns, [ 'error', "Location $newName already exists\n" ];
	} else {
	    $dbh->do("UPDATE location SET locationName = ? WHERE locationId = ?",undef,$newName,$locationId);
	    $dbh->commit;
	}
	push @returns, details($dbh,'location',$locationId);


    } elsif ($command eq 'get' and $objectType eq 'location') {
	my $sth = $dbh->prepare("SELECT locationId,locationName,locationHidden FROM location ORDER BY locationName DESC");
	$sth->execute;
	while (my $details = $sth->fetchrow_hashref) {
	    push @returns, [ 'location', $details ];
	}
	if ($sth->err) {
	    push @returns, [ 'error', $sth->err ];
	}

    #######################################
    # Tag

    } elsif ($command eq 'addTag') {
	if ($type <= READONLY) { push @returns, ['error','No permission']; return }
	my $tagName = $postdata->{tagName};
	my ($count) = $dbh->selectrow_array("SELECT COUNT(*) FROM tag WHERE tagName = ?",undef,$tagName);
	if ($count > 0) {
	    push @returns, [ 'error', "Tag $tagName already exists\n" ];
	} else {
	    $dbh->do("INSERT INTO tag (tagName) VALUES (?)",undef,$tagName);
	    my $tagId = $dbh->last_insert_id(undef,undef,undef,undef);
	    $dbh->commit;
	    push @returns, details($dbh,'tag',$tagId);
	}

    } elsif ($command eq 'setTagName') {
	if ($type <= READONLY) { push @returns, ['error','No permission']; return }

	my $tagId = $postdata->{tagId};
	my $newName = $postdata->{tagName};

	my ($count) = $dbh->selectrow_array("SELECT COUNT(*) FROM tag WHERE tagName = ?",undef,$newName);
	if ($count > 0) {
	    push @returns, [ 'error', "Tag $newName already exists\n" ];
	} else {
	    $dbh->do("UPDATE tag SET tagName = ? WHERE tagId = ?",undef,$newName,$tagId);
	    $dbh->commit;
	}
	push @returns, details($dbh,'tag',$tagId);


    } elsif ($command eq 'get' and $objectType eq 'tag') {
	my $sth = $dbh->prepare("SELECT tagId,tagName,tagHidden FROM tag ORDER BY tagName DESC");
	$sth->execute;
	while (my $details = $sth->fetchrow_hashref) {
	    push @returns, [ 'tag', $details ];
	}
	if ($sth->err) {
	    push @returns, [ 'error', $sth->err ];
	}

    #######################################
    # Bin

    } elsif ($command eq 'addBin') {
	if ($type <= READONLY) { push @returns, ['error','No permission']; return }
	my $binName = $postdata->{binName};
	my $binSlots = $postdata->{binSlots};
	my $locationId = $postdata->{locationId};
	my ($count) = $dbh->selectrow_array("SELECT COUNT(*) FROM bin WHERE binName = ?",undef,$binName);
	if ($count > 0) {
	    push @returns, [ 'error', "Bin $binName already exists\n" ];
	} else {
	    $dbh->do("INSERT INTO bin (binName,binSlots,locationId) VALUES (?,?,?)",undef,$binName,$binSlots,$locationId);
	    my $binId = $dbh->last_insert_id(undef,undef,undef,undef);
	    $dbh->commit;
	    push @returns, details($dbh,'bin',$binId);
	}

    } elsif ($command eq 'setBinName') {
	if ($type <= READONLY) { push @returns, ['error','No permission']; return }

	my $binId = $postdata->{binId};
	my $binName = $postdata->{binName};

	my ($count) = $dbh->selectrow_array("SELECT COUNT(*) FROM bin WHERE binName = ?",undef,$binName);
	if ($count > 0) {
	    push @returns, [ 'error', "Bin $binName already exists\n" ];
	} else {
	    $dbh->do("UPDATE bin SET binName = ? WHERE binId = ?",undef,$binName,$binId);
	    $dbh->commit;
	}
	push @returns, details($dbh,'bin',$binId);

    } elsif ($command eq 'setBinLocation') {
	if ($type <= READONLY) { push @returns, ['error','No permission']; return }

	my $binId = $postdata->{binId};
	my $locationId = $postdata->{locationId};

	$dbh->do("UPDATE bin SET locationId = ? WHERE binId = ?",undef,$locationId,$binId);
	$dbh->commit;

	push @returns, details($dbh,'bin',$binId);

    } elsif ($command eq 'changeBinSlots') {
	if ($type <= READONLY) { push @returns, ['error','No permission']; return }

	my $binId = $postdata->{binId};
	my $newSlots = $postdata->{newSlots};

	$dbh->do("UPDATE bin SET binSlots = ? WHERE binId = ?",undef,$newSlots,$binId);
	$dbh->commit;
	push @returns, details($dbh, 'bin', $binId);

    } elsif ($command eq 'get' and $objectType eq 'bin') {
	my $sth = $dbh->prepare("SELECT binId,binName,binSlots,locationId,locationName,binHidden FROM bin LEFT JOIN location USING (locationId) ORDER BY binName DESC");
	$sth->execute;
	while (my $details = $sth->fetchrow_hashref) {
	    push @returns, [ 'bin', $details ];
	}
	if ($sth->err) {
	    push @returns, [ 'error', $sth->err ];
	}

    #######################################
    # User

    } elsif ($command eq 'addUser') {
	if ($type < ADMIN) { push @returns, ['error','Must be an administrator to do this']; return }

	my $userName = $postdata->{newName};
	my $userPassword = $postdata->{newPassword};
	my $userType = $postdata->{newType};

	my ($count) = $dbh->selectrow_array("SELECT COUNT(*) FROM user WHERE userName = ?",undef,$userName);
	if ($count > 0) {
	    push @returns, [ 'error', "User $userName already exists\n" ];
	} else {
	    $dbh->do("INSERT INTO user (userName,userPassword,userType) VALUES (?,?,?)",undef,$userName,$userPassword,$userType);
	    my $userId = $dbh->last_insert_id(undef,undef,undef,undef);
	    $dbh->commit;
	    push @returns, details($dbh,'user',$userId);
	}

    } elsif ($command eq 'setUserType') {
	if ($type < ADMIN) { push @returns, ['error','Must be an administrator to do this']; return }

	my $userId = $postdata->{userId};
	my $userType = $postdata->{userType};
	$dbh->do("UPDATE user SET userType = ? WHERE userId = ?",undef,$userType,$userId);
	$dbh->commit;

	push @returns, details($dbh,'user',$userId);

    } elsif ($command eq 'setUserName') {
	if ($type < ADMIN) { push @returns, ['error','Must be an administrator to do this']; return }

	my $userId = $postdata->{userId};
	my $newName = $postdata->{userName};

	my ($count) = $dbh->selectrow_array("SELECT COUNT(*) FROM user WHERE userName = ?",undef,$newName);
	if ($count > 0) {
	    push @returns, [ 'error', "User $newName already exists\n" ];
	} else {
	    $dbh->do("UPDATE user SET userName = ? WHERE userId = ?",undef,$newName,$userId);
	    $dbh->commit;
	}
	push @returns, details($dbh,'user',$userId);

    } elsif ($command eq 'get' and $objectType eq 'user') {
	if ($type < ADMIN) { push @returns, ['error','Must be an administrator to do this']; return }

	my $sth = $dbh->prepare("SELECT userId,userName,userType,userHidden FROM user ORDER BY userName DESC");
	$sth->execute;
	while (my $details = $sth->fetchrow_hashref) {
	    push @returns, [ 'user', $details ];
	}
	if ($sth->err) {
	    push @returns, [ 'error', $sth->err ];
	}

    #######################################
    # Item

    } elsif ($command eq 'addItem') {
	if ($type <= READONLY) { push @returns, ['error','You do not have permission to do this']; return }

	my $itemMfr = $postdata->{newMfr};
	my $itemBrand = $postdata->{newBrand};
	my $itemType = $postdata->{newType};
	my $itemDesc = $postdata->{newDesc};
	my $itemSize = $postdata->{newSize};
	my @itemTags = split(',',$postdata->{newTags});

	my ($count) = $dbh->selectrow_array("SELECT COUNT(*) FROM item WHERE itemMfr = ? AND itemBrand = ? AND itemType = ? AND itemDesc = ? AND itemSize = ?",undef,$itemMfr,$itemBrand,$itemType,$itemDesc,$itemSize);
	if ($count > 0) {
	    push @returns, [ 'error', "Item \"$itemMfr $itemBrand $itemType $itemDesc $itemSize\" already exists\n" ];
	} else {
	    $dbh->do("INSERT INTO item (itemMfr,itemBrand,itemType,itemDesc,itemSize) VALUES (?,?,?,?,?)",undef,$itemMfr,$itemBrand,$itemType,$itemDesc,$itemSize);
	    my $itemId = $dbh->last_insert_id(undef,undef,undef,undef);
	    foreach my $tagId (@itemTags) {
		$dbh->do("INSERT INTO itemTag (itemId,tagId) VALUES (?,?)",undef,$itemId,$tagId);
	    }
	    $dbh->commit;
	    push @returns, details($dbh,'item',$itemId);
	}

    } elsif ($command eq 'setItemTags') {
	if ($type <= READONLY) { push @returns, ['error','You do not have permission to do this']; return }

	my $itemId = $postdata->{itemId};
	my @itemTags = split(',',$postdata->{itemTags});

	$dbh->do("DELETE FROM itemTag WHERE itemId = ?",undef,$itemId);
	foreach my $tagId (@itemTags) {
	    $dbh->do("INSERT INTO itemTag (itemId,tagId) VALUES (?,?)",undef,$itemId,$tagId);
	}

	$dbh->commit;

	push @returns, details($dbh,'item',$itemId);

    } elsif ($command =~ /^setItem(.*)/) {
	my $fieldName = "item$1";
	if ($type <= READONLY) { push @returns, ['error','You do not have permission to do this']; return }

	my $itemId = $postdata->{itemId};
	my $fieldValue = $postdata->{fieldName};

	$dbh->do("UPDATE item SET $fieldName = ? WHERE itemId = ?",undef,$fieldValue,$itemId);
	$dbh->commit;

	push @returns, details($dbh,'item',$itemId);

    } elsif ($command eq 'get' and $objectType eq 'item') {

	# Read in the tags table - it should be small
	my $sth = $dbh->prepare('SELECT tagId,tagName FROM tag');
	$sth->execute;
	my %tagName;
	while (my ($id,$name) = $sth->fetchrow_array) { $tagName{$id} = $name }

	$sth = $dbh->prepare("SELECT itemId,itemMfr,itemBrand,itemType,itemDesc,itemSize,itemHidden,group_concat(tagId) AS tagIds FROM item LEFT JOIN itemTag USING (itemId) GROUP BY itemMfr,itemBrand,itemType,itemDesc,itemSize ORDER BY itemMfr+\" \"+itemBrand+\" \"+itemType+\" \"+itemDesc+\" \"+itemSize DESC");
	$sth->execute;
	while (my $details = $sth->fetchrow_hashref) {
	    # Generate the item name
	    my @itemName;
	    foreach my $f (qw(itemMgr itemBrand itemType itemDesc itemSize)) {
		defined($details->{$f}) and push @itemName, $details->{$f};
	    }
	    $details->{itemName} = join(' ',@itemName);
	    # Convert the comma-separated list of tag names into a list of [ name, id ]
	    $details->{tagIds} ||= '';
	    $details->{itemTags} = [map { [$tagName{$_},$_] } split(',',$details->{tagIds})];
	    push @returns, [ 'item', $details ];
	}
	if ($sth->err) {
	    push @returns, [ 'error', $sth->err ];
	}

    #######################################
    # Password stuff

    } elsif ($command eq 'changeMyPassword') {
	my $oldPassword = $postdata->{oldPassword};
	my $newPassword = $postdata->{newPassword};

	if ($oldPassword ne $password) {
	    push @returns, [ 'error', "Password is wrong" ];
	    return;
	}
	$dbh->do("UPDATE user SET userPassword = ? WHERE userName = ?",undef,$newPassword,$username);
	$dbh->commit();
	# no return value = success

    } elsif ($command eq 'setUserPassword') {
	if ($type < ADMIN) { push @returns, [ 'error', "Must be an administrator to do this" ]; return;	}

	my $changeUserId = $postdata->{userId};
	my $newPassword = $postdata->{newPassword};
	$dbh->do("UPDATE user SET userPassword = ? WHERE userId = ?",undef,$newPassword,$changeUserId);
	$dbh->commit();
	# no return = success

    #######################################
    } else {
	push @returns, [ 'error', "ESP api: unknown request: $command $objectType" ];
    }
};
if ($@) {
    push @returns, [ 'error', $@ ];
}

$dbh and $dbh->disconnect;

if ($trace) {
    foreach my $return (@returns) {
	warn "Return: @$return\n";
    }
}

print "Content-Type: text/json;charset=utf-8\n";
print "\n";
print encode_json(\@returns);

###############################################################################
sub details {
    my $dbh = shift;
    my $objectType = shift;
    my $id = shift;
    
    if ($objectType eq 'bin') {
	my $details =
	    $dbh->selectrow_hashref("SELECT binId,binName,binSlots,binHidden,locationId,locationName FROM bin LEFT JOIN location USING (locationId) WHERE binId = ?", undef, $id);
	return [ 'bin', $details ];
    }
    if ($objectType eq 'user') {
	my $details =
	    $dbh->selectrow_hashref("SELECT userId,userName,userType,userHidden FROM user WHERE userId = ?",undef,$id);
	return [ 'user', $details ];
    }
    if ($objectType eq 'location') {
	my $details =
	    $dbh->selectrow_hashref("SELECT locationId,locationName,locationHidden FROM location WHERE locationId = ?",undef,$id);
	return [ 'location', $details ];
    }
    if ($objectType eq 'tag') {
	my $details =
	    $dbh->selectrow_hashref("SELECT tagId,tagName,tagHidden FROM tag WHERE tagId = ?",undef,$id);
	return [ 'tag', $details ];
    }
    if ($objectType eq 'item') {
	my $details =
	    $dbh->selectrow_hashref("SELECT itemId,itemMfr,itemBrand,itemType,itemDesc,itemSize,itemHidden FROM item WHERE itemId = ?",undef,$id);
	my @tags;
	my $sth = $dbh->prepare("SELECT tagId,tagName FROM itemTag LEFT JOIN tag USING (tagId) WHERE itemId = ?");
	$sth->execute($id);
	while (my ($tagId,$tagName) = $sth->fetchrow_array) {
	    push @tags, [ $tagName, $tagId ];
	}
	$details->{itemTags} = \@tags;
	return [ 'item', $details ];
    }

}

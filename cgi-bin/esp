#!/usr/bin/perl

use warnings;
use strict;

use CGI;
use DBI;
use JSON qw(encode_json);

use constant ADMIN => 2;
use constant NORMAL => 1;
use constant READONLY => 0;

my $query = CGI->new;

my @returns;
my $dbh;

my $trace = 0;
#my $trace = 1;

if ($trace) {
    foreach my $param ($query->param()) {
	warn "$param = ",$query->param($param),"\n";
    }
}

eval {
    my $command = $query->param('command');

    #######################################
    # Make sure the user is approved to use the database
    my $database = $query->param('database');
    my $username = $query->param('username');
    my $password = $query->param('password');

    # Config file is a list of pairs of lines, with database name and directory
    open CONFIG, "/var/esp/config" or die "Cannot open config file, $!\n";
    my %config = map { chomp; $_ } <CONFIG>;
    close CONFIG;

    exists $config{$database} or die "No such database: $database\n";

    # Got the database, now find the directory that the database and lock file are stored in
    my $dir = $config{$database};

    if (-f "$dir/LOCKED") {
	my $message;
	if (open F, "$dir/LOCKED") {
	    $message = <F>;
	    close F;
	} else {
	    $message = 'Database is locked';
	}

	push @returns, [ 'error', "Database \"$database\" cannot be used: $message" ];
	return;
    }

    $dbh = DBI->connect("dbi:SQLite:dbname=$config{$database}/db","","",{
	AutoCommit=>0,
	PrintError=>0,
	RaiseError=>1,
		       });

    my ($actualPassword,$type,$hidden) = $dbh->selectrow_array("SELECT userPassword,userType,userHidden FROM user WHERE userName = ?",undef,$username);
    
    if ($hidden) {
	push @returns, [ 'error', "User $username is currently not allowed to use the system" ];
	return;
    }

    if (!$actualPassword || $password ne $actualPassword) {
	push @returns, [ 'error', "Username or password is wrong" ];
	return;
    }

    if ($password eq 'changeme' &&  $command ne 'changeMyPassword' && $command ne 'login') {
	push @returns, [ 'error', 'You must change your password before you can do anything else' ];
	return;
    }

    if ($command eq 'login') {
	push @returns, [ 'login',$type ];
	push @returns, [ 'success' ];

    } elsif ($command eq 'addLocation') {
	my $locationName = $query->param('locationName');
	my ($count) = $dbh->selectrow_array("SELECT COUNT(*) FROM location WHERE locationName = ?",undef,$locationName);
	if ($count > 0) {
	    push @returns, [ 'error', "Location $locationName already exists\n" ];
	} else {
	    $dbh->do("INSERT INTO location (locationName) VALUES (?)",undef,$locationName);
	    my $locationId = $dbh->last_insert_id(undef,undef,undef,undef);
	    $dbh->commit;
	    push @returns, [ 'location', $locationId, $locationName, 0 ];
	    push @returns, [ 'success' ];
	}

    } elsif ($command eq 'addUser') {
	if ($type < ADMIN) { push @returns, ['error','Must be an administrator to do this']; return }

	my $userName = $query->param('newName');
	my $userPassword = $query->param('newPassword');
	my $userType = $query->param('newType');

	my ($count) = $dbh->selectrow_array("SELECT COUNT(*) FROM user WHERE userName = ?",undef,$userName);
	if ($count > 0) {
	    push @returns, [ 'error', "User $userName already exists\n" ];
	} else {
	    $dbh->do("INSERT INTO user (userName,userPassword,userType) VALUES (?,?,?)",undef,$userName,$userPassword,$userType);
	    my $userId = $dbh->last_insert_id(undef,undef,undef,undef);
	    $dbh->commit;
	    push @returns, [ 'user', $userId, $userName,$userType,0 ];
	    push @returns, [ 'success' ];
	}

    } elsif ($command eq 'hiddenLocation') {
	my $locationId = $query->param('locationId');
	my $sth = $dbh->prepare("SELECT locationHidden FROM location WHERE locationId = ?",undef);
	$sth->execute($locationId);
	my ($locationHidden) = $sth->fetchrow_array;
	$locationHidden = !$locationHidden;
	$dbh->do("UPDATE location SET locationHidden = ? WHERE locationId = ?",undef,$locationHidden,$locationId);
	$dbh->commit;
	push @returns, [ 'locationHidden', $locationId, $locationHidden ];
	push @returns, [ 'success' ];

    } elsif ($command eq 'hiddenUser') {
	if ($type < ADMIN) { push @returns, ['error','Must be an administrator to do this']; return }

	my $userId = $query->param('userId');
	my $sth = $dbh->prepare("SELECT userHidden FROM user WHERE userId = ?",undef);
	$sth->execute($userId);
	my ($userHidden) = $sth->fetchrow_array;
	$userHidden = !$userHidden;
	$dbh->do("UPDATE user SET userHidden = ? WHERE userId = ?",undef,$userHidden,$userId);
	$dbh->commit;
	push @returns, [ 'userHidden', $userId, $userHidden ];
	push @returns, [ 'success' ];

    } elsif ($command eq 'userType') {
	if ($type < ADMIN) { push @returns, ['error','Must be an administrator to do this']; return }

	my $userId = $query->param('userId');
	my $userType = $query->param('userType');
	$dbh->do("UPDATE user SET userType = ? WHERE userId = ?",undef,$userType,$userId);
	$dbh->commit;
	push @returns, [ 'userType', $userId, $userType ];
	push @returns, [ 'success' ];

    } elsif ($command eq 'changeLocationName') {
	my $locationId = $query->param('locationId');
	my $newName = $query->param('newName');

	my ($count) = $dbh->selectrow_array("SELECT COUNT(*) FROM location WHERE locationName = ?",undef,$newName);
	if ($count > 0) {
	    my ($oldName) = $dbh->selectrow_array("SELECT locationName FROM location WHERE locationId = ?",undef,$locationId);
	    push @returns, [ 'locationName', $locationId, $oldName ];
	    push @returns, [ 'error', "Location $newName already exists\n" ];
	} else {
	    $dbh->do("UPDATE location SET locationName = ? WHERE locationId = ?",undef,$newName,$locationId);
	    $dbh->commit;
	    push @returns, [ 'locationName', $locationId, $newName ];
	    push @returns, [ 'success' ];
	}

    } elsif ($command eq 'changeUserName') {
	if ($type < ADMIN) { push @returns, ['error','Must be an administrator to do this']; return }

	my $userId = $query->param('userId');
	my $newName = $query->param('newName');

	my ($count) = $dbh->selectrow_array("SELECT COUNT(*) FROM user WHERE userName = ?",undef,$newName);
	if ($count > 0) {
	    my ($oldName) = $dbh->selectrow_array("SELECT userName FROM user WHERE userId = ?",undef,$userId);
	    push @returns, [ 'userName', $userId, $oldName ];
	    push @returns, [ 'error', "User $newName already exists\n" ];
	} else {
	    $dbh->do("UPDATE user SET userName = ? WHERE userId = ?",undef,$newName,$userId);
	    $dbh->commit;
	    push @returns, [ 'userName', $userId, $newName ];
	    push @returns, [ 'success' ];
	}

    } elsif ($command eq 'getLocations') {
	my $sth = $dbh->prepare("SELECT locationId,locationName,locationHidden FROM location ORDER BY locationName DESC");
	$sth->execute;
	while (my @a = $sth->fetchrow_array) {
	    push @returns, [ 'location', @a ];
	}
	if ($sth->err) {
	    push @returns, [ 'error', $sth->err ];
	} else {
	    push @returns, [ 'success' ];
	}

    } elsif ($command eq 'getUsers') {
	if ($type < ADMIN) { push @returns, ['error','Must be an administrator to do this']; return }

	my $sth = $dbh->prepare("SELECT userId,userName,userType,userHidden FROM user ORDER BY userName DESC");
	$sth->execute;
	while (my @a = $sth->fetchrow_array) {
	    push @returns, [ 'user', @a ];
	}
	if ($sth->err) {
	    push @returns, [ 'error', $sth->err ];
	} else {
	    push @returns, [ 'success' ];
	}

    } elsif ($command eq 'changeMyPassword') {
	my $oldPassword = $query->param('oldPassword');
	my $newPassword = $query->param('newPassword');

	if ($oldPassword ne $password) {
	    push @returns, [ 'error', "Password is wrong" ];
	    return;
	}
	$dbh->do("UPDATE user SET userPassword = ? WHERE userName = ?",undef,$newPassword,$username);
	$dbh->commit();
	push @returns, [ 'changeMyPassword', $newPassword ];
	push @returns, [ 'success' ];

    } elsif ($command eq 'changePassword') {
	if ($type < ADMIN) {
	    push @returns, [ 'error', "Must be an administrator to do this" ];
	    return;
	}
	my $changeUserId = $query->param('changeUserId');
	my $newPassword = $query->param('newPassword');
	$dbh->do("UPDATE user SET userPassword = ? WHERE userId = ?",undef,$newPassword,$changeUserId);
	$dbh->commit();
	push @returns, [ 'changePassword' ];
	push @returns, [ 'success' ];

    } else {
	push @returns, [ 'error', "ESP api: unknown request: $command" ];
    }
};
if ($@) {
    push @returns, [ 'error', $@ ];
}

$dbh->disconnect;

if ($trace) {
    foreach my $return (@returns) {
	warn "Return: @$return\n";
    }
}

print "Content-Type: text/json;charset=utf-8\n";
print "\n";
print encode_json(\@returns);
